{"version":3,"sources":["reducers/counter.js","reducers/index.js","actions/index.js","components/Counter/CounterContainer.js","components/Counter/Counter.js","components/Header/Header.js","components/ProductList/ProductListContainer.js","components/ProductList/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["initialState","value","combineReducers","counter","state","arguments","length","undefined","type","Object","objectSpread","CounterContainer","connect","props","react_default","a","createElement","className","Header","Counter_CounterContainer","ProductListContainer","dispatch","addToCart","removeFromCart","_ref","onClick","App","ProductList_ProductListContainer","Component","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAEMA,EAAe,CACnBC,MAAO,GCAMC,cAAgB,CAC7BC,QDEF,WAAiD,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EACtB,QAD+CK,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAChCC,MACb,IERuB,cFSrB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADL,CAEEH,QAASG,EAAMH,QAEnB,IEZ4B,mBFa1B,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADL,CAEEH,MAAOG,EAAMH,QAAUG,EAAMH,MAAQ,IAEzC,QACE,OAAOG,sDGREO,EAJUC,YAJD,SAAAR,GAAK,MAAK,CAChCD,QAASC,EAAMD,QAAQF,QAGAW,CCLV,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMV,WCDrBe,EAAA,SAACL,GACd,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACG,EAAD,QCeSC,EALcR,YAC3B,iBAAO,IAVkB,SAAAS,GAAQ,MAAK,CACtCC,UAAW,WACTD,EAAS,CAAEb,KJTY,iBIWzBe,eAAgB,WACdF,EAAS,CAAEb,KJXiB,wBIeHI,CCdd,SAAAY,GAAmC,IAAhCF,EAAgCE,EAAhCF,UAAWC,EAAqBC,EAArBD,eAC3B,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQS,QAASH,GAAjB,eACAR,EAAAC,EAAAC,cAAA,UAAQS,QAASF,GAAjB,uBCQSG,mLATX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACW,EAAD,cALUC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYC,GAE1BC,IAASC,OACPxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAUL,MAAOA,GACfpB,EAAAC,EAAAC,cAACwB,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56403158.chunk.js","sourcesContent":["import { ADD_TO_CART, REMOVE_FROM_CART } from '../actions';\n\nconst initialState = {\n  value: 0\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return {\n        ...state,\n        value: ++state.value\n      }\n    case REMOVE_FROM_CART:\n      return {\n        ...state,\n        value: state.value ? --state.value : 0\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport counter from './counter';\n\nexport default combineReducers({\n  counter\n});","export const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n","import { connect } from 'react-redux';\nimport Counter from './Counter';\n\nconst mapStateToProps = state => ({\n  counter: state.counter.value\n});\n\nconst CounterContainer = connect(\n  mapStateToProps\n)(Counter);\n\nexport default CounterContainer;\n","import React from 'react';\n\nexport default (props) => {\n  return (\n    <div className=\"Counter\">{props.counter}</div>\n  );\n}","import React from 'react';\nimport CounterContainer from '../Counter/CounterContainer';\n\nexport default (props) => {\n  return (\n    <header>\n      <CounterContainer />\n    </header>\n  );\n}","import { connect } from 'react-redux';\nimport ProductList from './ProductList';\nimport {\n  ADD_TO_CART,\n  REMOVE_FROM_CART\n} from '../../actions';\n\nconst mapDispatchToProps = dispatch => ({\n  addToCart: () => {\n    dispatch({ type: ADD_TO_CART });\n  },\n  removeFromCart: () => {\n    dispatch({ type: REMOVE_FROM_CART });\n  }\n});\n\nconst ProductListContainer = connect(\n  () => ({}),\n  mapDispatchToProps\n)(ProductList);\n\nexport default ProductListContainer;\n","import React from 'react';\n\nexport default ({ addToCart, removeFromCart }) => {\n  return (\n    <div>\n      <button onClick={addToCart}>add to cart</button>\n      <button onClick={removeFromCart}>remove from cart</button>\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport ProductListContainer from './components/ProductList/ProductListContainer';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <ProductListContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}